#!/bin/bash

##############################################################################
# 
# Copyright (C) Zenoss, Inc. 2010, all rights reserved.
# 
# This content is made available according to terms specified in
# License.zenoss under the directory where your Zenoss product is installed.
# 
##############################################################################


ZEPDIR=${ZENHOME}/webapps/zeneventserver
ZEP_WEB_XML=${ZEPDIR}/WEB-INF/web.xml

if [ ! -f ${ZEP_WEB_XML} ]; then
   DEV_MVN_RUN="mvn -DskipTests=true -Djetty.port=8084 -Dzep.index.dir=/opt/zenoss/var/zeneventserver/index clean jetty:run"
   # if web.xml doesn't exists we might be in dev mode
   # cd into zep directory and try to run via maven
   set -e
   cd ${ZEPDIR}/core
   CMD=$1
   case "$CMD" in
      run)
         ${DEV_MVN_RUN}
         exit
         ;;
      run_quiet)
         ${DEV_MVN_RUN} >${ZENHOME}/log/zeneventserver.log 2>&1
         exit
         ;;
      start)
         ${DEV_MVN_RUN} >${ZENHOME}/log/zeneventserver.log 2>&1 &
	      n=0
	      while [ $n -lt 150 ]
	      do
		      echo -n '.'
		      curl http://localhost:8084/zeneventserver/api/1.0/heartbeats/ >/dev/null 2>$1 && break  
		      n=$[$n+1]
		      sleep 2
	      done
	      echo ""
	      if [ $n -ge 150 ]; then
		      mvn -DskipTests=true jetty:stop
		      echo "zep failed to start after 300 seconds"
		      exit 1
	      fi
         exit
         ;;
      stop)
         mvn -DskipTests=true jetty:stop
         exit
         ;;
      status)
         # In devmode echo this message so that testDaemons in
         # Products.ZenUtils.tests.testCommandLineProgs always passes.
         echo "program running"
         exit
         ;;
      *)
         echo "only start, stop and run supported in devmode"
         exit 1
    esac
fi

#get path to this script
RELDIR=`dirname $0`
cd $RELDIR

#get absolute path to script
JETTY_BIN="`pwd`"
JETTY_HOME="`dirname ${JETTY_BIN}`"
#start app from jetty_home
cd $JETTY_HOME

DEFAULT_ZEP_JVM_ARGS=${DEFAULT_ZEP_JVM_ARGS:-"-server"}

# DEFAULT_ZEP_JVM_ARGS is passed into the environment with its value quoted.
# Use the eval command to remove the quote marks from the value.
DEFAULT_ZEP_JVM_ARGS=$(eval echo $DEFAULT_ZEP_JVM_ARGS)

JVM_ARGS="$DEFAULT_ZEP_JVM_ARGS"
JVM_ARGS="$JVM_ARGS -XX:+HeapDumpOnOutOfMemoryError"
JVM_ARGS="$JVM_ARGS -DZENOSS_COMMAND=zeneventserver"
JVM_ARGS="$JVM_ARGS -DZENHOME=${JETTY_HOME}"
JVM_ARGS="$JVM_ARGS -Djetty.home=${JETTY_HOME}"
JVM_ARGS="$JVM_ARGS -Djetty.logs=${JETTY_HOME}/log"
JVM_ARGS="$JVM_ARGS -Dlogback.configurationFile=${JETTY_HOME}/etc/zeneventserver/logback.xml"
ZENOSS_STARTUP_TIMEOUT=${ZENOSS_STARTUP_TIMEOUT:-"180"}

JETTY_ARGS="--config=$JETTY_HOME/etc/zeneventserver/jetty/start.config"
JETTY_ARGS="$JETTY_ARGS --ini=$JETTY_HOME/etc/zeneventserver/jetty/jetty.ini"

VAR=${JETTY_HOME}/var
mkdir -p ${VAR}/run

#zenoss expects {daemonname}-{monitor} for pid file
#zep only runs on localhost
PIDFILE=${VAR}/zeneventserver-localhost.pid
CMD=$1

# Check maximum amount of virtual memory available to the shell 
MAXVMEM=$(ulimit -v) 
if [[ $MAXVMEM != "unlimited" ]] ; then 
	echo "Maximum amount of virtual memory should not be limited" 
	echo "Please check ulimit -v" 
	exit 1 
fi 

# Check maximum resident set size 
MAXRSS=$(ulimit -m) 
if [[ $MAXRSS != "unlimited" ]] ; then 
	echo "maximum amount of resident set size should not be limited" 
	echo "Please check ulimit -m" 
	exit 1 
fi 

JAVAEXE="java"

. ${JETTY_BIN}/zeneventserver-functions.sh

# Check for java
JVERSION=`LC_ALL=C $JAVAEXE -version 2>&1 | grep "java version\|openjdk version" | awk '{print $3}' | cut -d'"' -f2`
case "$JVERSION" in
    1.[6789].*)
        ;;
    *)
        echo "Java >= 1.6 is required."
        exit 1
esac

# RUN the command
generic "$@"

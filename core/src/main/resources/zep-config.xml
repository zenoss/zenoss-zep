<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task"

       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
                           http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd">

    <context:annotation-config/>
    <context:component-scan base-package="org.zenoss.zep"/>

    <bean id="scheduler" class="org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler">
        <property name="poolSize" value="10" />
        <property name="threadNamePrefix" value="ZEP-SCHEDULER"/>
    </bean>

    <bean id="rejectedExecutionHandler" class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy">
    </bean>

    <bean id="queueExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean">
        <property name="corePoolSize" value="${zep.executor.core_pool_size:#{T(java.lang.Runtime).getRuntime().availableProcessors()}}" />
        <property name="maxPoolSize" value="${zep.executor.max_pool_size:#{T(java.lang.Runtime).getRuntime().availableProcessors()}}" />
        <property name="threadNamePrefix" value="ZEP" />
        <property name="waitForTasksToCompleteOnShutdown" value="true" />
        <property name="queueCapacity" value="${zep.executor.queue_capacity:10}" />
        <property name="rejectedExecutionHandler" ref="rejectedExecutionHandler" />
    </bean>

    <!-- CFG -->
    <import resource="zep-config-cfg.xml"/>

    <!-- DAO -->
    <import resource="zep-config-daos.xml"/>

    <!-- REST -->
    <import resource="zep-config-rest.xml"/>

    <bean id="pluginService" class="org.zenoss.zep.impl.PluginServiceImpl">
        <constructor-arg index="0" ref="zepConfig" />
        <constructor-arg index="1" value="${zep.plugins.external.disabled:false}" />
    </bean>

    <bean id="eventFanOutPlugin" class="org.zenoss.zep.impl.EventFanOutPlugin">
        <property name="amqpConnectionManager" ref="amqpConnectionManager"/>
    </bean>

    <bean id="eventProcessor" class="org.zenoss.zep.impl.EventProcessorImpl">
        <property name="pluginService" ref="pluginService"/>
        <property name="eventSummaryDao" ref="eventSummaryDao"/>
        <property name="counters" ref="counters"/>
    </bean>

    <bean id="eventPublisher" class="org.zenoss.zep.impl.EventPublisherImpl">
        <property name="amqpConnectionManager" ref="amqpConnectionManager" />
    </bean>

    <bean id="eventQueueListener" class="org.zenoss.zep.impl.RawEventQueueListener"
          depends-on="application">
        <property name="prefetchCount" value="${zep.queue.$ZepZenEvents.prefetch_count}"/>
        <property name="executorService" ref="queueExecutor" />
        <property name="eventProcessor" ref="eventProcessor"/>
        <property name="throttleConsumer" value="${zep.index.throttle:true}" />
        <property name="indexQueueThreshold" value="${zep.index.throttle_threshold:10000}"/>
        <property name="consumerSleepTime" value="${zep.index.throttle_sleep:1000}"/>
    </bean>

    <bean id="modelChangeEventQueueListener" class="org.zenoss.zep.impl.ModelChangeEventQueueListener"
          depends-on="application">
        <property name="prefetchCount" value="${zep.queue.$ZepModelChange.prefetch_count}"/>
        <property name="executorService" ref="queueExecutor" />
        <property name="eventSummaryDao" ref="eventSummaryDao"/>
    </bean>

    <bean id="heartbeatListener" class="org.zenoss.zep.impl.HeartbeatListener" depends-on="application">
        <property name="prefetchCount" value="${zep.queue.$ZepHeartbeats.prefetch_count}"/>
        <property name="executorService" ref="queueExecutor" />
        <property name="heartbeatDao" ref="heartbeatDao" />
    </bean>

    <!-- Create a single thread executor for processing migrated events -->
    <bean id="migratedExecutor" class="java.util.concurrent.Executors" factory-method="newSingleThreadExecutor">
    </bean>

    <bean id="migratedEventQueueListenerSummary" class="org.zenoss.zep.impl.MigratedEventQueueListener"
          depends-on="application">
        <qualifier value="summary" />
        <property name="queueIdentifier" value="$ZepMigratedEventSummary" />
        <property name="prefetchCount" value="${zep.queue.$ZepMigratedEventSummary.prefetch_count}"/>
        <property name="executorService" ref="migratedExecutor" />
        <property name="eventSummaryBaseDao" ref="eventSummaryDao" />
        <property name="eventStoreDao" ref="eventStoreDao" />
    </bean>

    <bean id="migratedEventQueueListenerArchive" class="org.zenoss.zep.impl.MigratedEventQueueListener"
          depends-on="application">
        <qualifier value="archive" />
        <property name="queueIdentifier" value="$ZepMigratedEventArchive" />
        <property name="prefetchCount" value="${zep.queue.$ZepMigratedEventArchive.prefetch_count}"/>
        <property name="executorService" ref="migratedExecutor" />
        <property name="eventSummaryBaseDao" ref="eventArchiveDao" />
        <property name="eventStoreDao" ref="eventStoreDao" />
    </bean>

    <bean id="heartbeatProcessor" class="org.zenoss.zep.impl.HeartbeatProcessorImpl">
        <property name="eventPublisher" ref="eventPublisher" />
        <property name="heartbeatDao" ref="heartbeatDao" />
        <property name="eventIndexDao" ref="eventSummaryIndexDao" />
        <property name="uuidGenerator" ref="uuidGenerator" />
    </bean>

    <bean id="amqpServerUri" class="org.zenoss.amqp.AmqpServerUri" factory-method="createFromGlobalConf">
        <constructor-arg index="0" ref="globalConf"/>
        <constructor-arg index="1" value="${zep.amqp.uri}"/>
    </bean>

    <bean id="amqpConnectionManager" class="org.zenoss.amqp.AmqpConnectionManager" init-method="init">
        <constructor-arg index="0" ref="amqpServerUri"/>
        <constructor-arg index="1" value="${zep.amqp.retry}"/>
        <property name="extensionRegistry" ref="extensionRegistry" />
    </bean>

    <bean id="extensionRegistry" class="com.google.protobuf.ExtensionRegistry" factory-method="newInstance">
    </bean>

    <bean id="application" class="org.zenoss.zep.impl.Application" destroy-method="shutdown"
          depends-on="amqpConnectionManager">
        <property name="configDao" ref="configDao"/>
        <property name="amqpConnectionManager" ref="amqpConnectionManager" />
        <property name="eventStoreDao" ref="eventStoreDao"/>
        <property name="eventArchiveDao" ref="eventArchiveDao"/>
        <property name="eventTimeDao" ref="eventTimeDao"/>
        <property name="eventSummaryIndexer" ref="eventSummaryIndexer"/>
        <property name="eventSummaryRebuilder" ref="eventSummaryIndexRebuilder"/>
        <property name="eventArchiveIndexer" ref="eventArchiveIndexer"/>
        <property name="eventArchiveRebuilder" ref="eventArchiveIndexRebuilder"/>
        <property name="heartbeatProcessor" ref="heartbeatProcessor" />
        <property name="heartbeatIntervalSeconds" value="${zep.heartbeat.interval_seconds:60}" />
        <property name="pluginService" ref="pluginService" />
        <property name="queueExecutor" ref="queueExecutor" />
        <property name="migratedExecutor" ref="migratedExecutor" />
        <property name="scheduler" ref="scheduler" />
        <property name="dbMaintenanceService" ref="dbMaintenanceService" />
        <property name="dbMaintenanceIntervalMinutes" value="${zep.database.optimize_minutes:60}" />
    </bean>

    <bean id="triggerPlugin" class="org.zenoss.zep.impl.TriggerPlugin">
        <property name="triggerDao" ref="eventTriggerDao"/>
        <property name="signalSpoolDao" ref="eventSignalSpoolDao"/>
        <property name="eventSummaryDao" ref="eventSummaryDao"/>
        <property name="eventTriggerSubscriptionDao" ref="eventTriggerSubscriptionDao"/>
        <property name="connectionManager" ref="amqpConnectionManager"/>
        <property name="eventStoreDao" ref="eventStoreDao"/>
        <property name="triggerRuleCacheSize" value="${plugin.TriggerPlugin.triggerRuleCacheSize:200}" />
    </bean>



    <bean id="eventFlappingPlugin" class="org.zenoss.zep.impl.EventFlappingPlugin">
        <property name="config" ref="configDao" />
    </bean>

    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basenames">
            <array>
                <value>org.zenoss.zep.messages</value>
            </array>
        </property>
    </bean>

    <bean id="messages" class="org.zenoss.zep.Messages">
        <constructor-arg ref="messageSource"/>
    </bean>

    <bean id="uuidGenerator" class="org.zenoss.zep.impl.UUIDGeneratorImpl">
    </bean>

    <!-- ZING! -->
    <bean id="zingConfig" class="org.zenoss.zep.zing.ZingConfig">
        <property name="enabled" value="${zep.zing.enabled:false}"/>
        <property name="useEmulator" value="${zep.zing.use_emulator:false}"/>
        <property name="usePubsubLite" value="${zep.zing.use_pubsublite:false}"/>
        <property name="tenant" value="${zep.zing.tenant:#{''}}"/>
        <property name="source" value="${zep.zing.source:#{''}}"/>
        <property name="project" value="${zep.zing.project:#{''}}"/>
        <property name="topic" value="${zep.zing.topic:#{''}}"/>
        <property name="pubsubLiteProjectNumber" value="${zep.zing.pubsublite_project_number:0}"/>
        <property name="pubsubLiteLocation" value="${zep.zing.pubsublite_location:#{''}}"/>
        <property name="emulatorHostAndPort" value="${zep.zing.emulator_url:#{''}}"/>
        <property name="credentialsPath" value="${zep.zing.credentials:#{''}}"/>
        <property name="minimumSeverity" value="${zep.zing.minimum_severity:#{''}}"/>
        <property name="maxPubsubMessageSize" value="${zep.zing.max_pubsub_message_size:#{''}}"/>
        <property name="maxEventFieldLength" value="${zep.zing.max_event_field_length:#{''}}"/>
    </bean>

    <bean id="zingEventProcessor" class="org.zenoss.zep.zing.impl.ZingEventProcessorImpl" 
          destroy-method="shutdown" init-method="init">
        <constructor-arg index="0" ref="zingConfig"/>
    </bean>

    <bean id="ZingPostIndexPlugin" class="org.zenoss.zep.zing.impl.ZingPostIndexPlugin">
        <constructor-arg index="0" ref="zingEventProcessor"/>
    </bean>

    <!-- Framework for MBeans support -->
    <bean id="mbeanServer" class="org.springframework.jmx.support.MBeanServerFactoryBean">
        <property name="locateExistingServerIfPossible" value="true"/>
    </bean>

    <bean id="exporter" class="org.springframework.jmx.export.MBeanExporter" lazy-init="false">
        <property name="server" ref="mbeanServer"/>
        <property name="autodetect" value="true"/>
        <property name="beans">
            <map>
                <entry key="org.zenoss.zep:name=stats,type=ZepMXBean" value-ref="statisticsService"/>
            </map>
        </property>
    </bean>

    <bean id="counters" class="org.zenoss.zep.impl.CountersImpl" />

    <bean id="statisticsService" class="org.zenoss.zep.impl.StatisticsServiceImpl">
        <property name="counters" ref="counters"/>
        <property name="configDao" ref="configDao"/>
        <property name="eventSummaryDao" ref="eventSummaryDao"/>
        <property name="eventSummaryIndexDao" ref="eventSummaryIndexDao"/>
        <property name="eventArchiveIndexDao" ref="eventArchiveIndexDao"/>
        <property name="eventSummaryIndexQueueDao" ref="eventSummaryIndexQueueDao"/>
        <property name="eventArchiveIndexQueueDao" ref="eventArchiveIndexQueueDao"/>
    </bean>

    <bean id="metrics" factory-method="getOrCreate" class="com.codahale.metrics.SharedMetricRegistries">
        <constructor-arg>
            <value type="java.lang.String">zep</value>
        </constructor-arg>
    </bean>

    <bean id="metrics-health" class="com.codahale.metrics.health.HealthCheckRegistry" />

    <bean id="zenossReporterFactoryBean" class="org.zenoss.metrics.spring.ZenossReporterFactoryBean">
        <property name="properties">
            <map>
                <entry key="period" value="${zep.metrics.post.period:30s}"/>
                <entry key="username" value="${zauth-username:#{null}}"/>
                <entry key="password" value="${zauth-password:#{null}}"/>
                <entry key="tag" value="zenoss_daemon:zeneventserver"/>
                <entry key="prefix" value="zeneventserver"/>
            </map>
        </property>
        <property name="metricRegistry" ref="metrics"/>
    </bean>

    <bean id="zenossReporter" factory-bean="zenossReporterFactoryBean" factory-method="createInstance"/>

    <bean id="controlCenterReporterFactoryBean" class="org.zenoss.metrics.spring.ZenossReporterFactoryBean">
        <property name="properties">
            <map>
                <entry key="period" value="${zep.metrics.post.period:30s}"/>
                <entry key="post-url" value="${CONTROLPLANE_CONSUMER_URL:http://localhost:22350/api/metrics/store}"/>
                <entry key="tag" value="zenoss_daemon:zeneventserver"/>
                <entry key="prefix" value="zeneventserver"/>
            </map>
        </property>
        <property name="metricRegistry" ref="metrics"/>
    </bean>

    <bean id="controlCenterReporter" factory-bean="controlCenterReporterFactoryBean" factory-method="createInstance"/>

    <task:scheduled-tasks>
        <task:scheduled ref="zenossReporter" method="run" fixed-rate="#{zenossReporterFactoryBean.getPeriod()}"/>
        <task:scheduled ref="controlCenterReporter" method="run" fixed-rate="#{controlCenterReporterFactoryBean.getPeriod()}"/>
    </task:scheduled-tasks>

</beans>

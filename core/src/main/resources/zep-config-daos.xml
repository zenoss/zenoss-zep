<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

    <!-- Transaction Support -->
    <tx:annotation-driven/>
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- JDBC Datasource -->
    <bean id="dataSource" class="org.zenoss.zep.dao.impl.DaoUtils" factory-method="createDataSource" destroy-method="close">
        <constructor-arg index="0" ref="globalConf" />
        <constructor-arg index="1" ref="zepInstance" />
    </bean>

    <bean id="databaseCompatibility" class="org.zenoss.zep.dao.impl.DaoUtils" factory-method="createDatabaseCompatibility">
        <constructor-arg index="0" ref="globalConf" />
        <constructor-arg index="1" ref="zepInstance" />
    </bean>

    <bean id="nestedTransactionService" class="org.zenoss.zep.dao.impl.compat.NestedTransactionServiceImpl">
        <constructor-arg index="0" ref="dataSource" />
    </bean>

    <!-- Partition configuration -->
    <bean id="partitionConfig" class="org.zenoss.zep.dao.impl.PartitionConfig">
        <constructor-arg index="0" ref="zepConfig"/>
    </bean>

    <bean id="configService" class="org.zenoss.zep.impl.ZepConfigServiceImpl">
        <property name="configDao" ref="configDao"/>
    </bean>
    
    <!-- DAO -->
    <bean id="eventDaoHelper" class="org.zenoss.zep.dao.impl.EventDaoHelper">
        <property name="daoCache" ref="daoCache"/>
        <property name="uuidGenerator" ref="uuidGenerator"/>
        <property name="databaseCompatibility" ref="databaseCompatibility"/>
        <property name="zepConfigService" ref="configService"/>
    </bean>
    <bean id="eventSummaryDao" class="org.zenoss.zep.dao.impl.EventSummaryDaoImpl">
        <constructor-arg index="0" ref="dataSource"/>
        <property name="eventDaoHelper" ref="eventDaoHelper"/>
        <property name="uuidGenerator" ref="uuidGenerator"/>
        <property name="databaseCompatibility" ref="databaseCompatibility"/>
        <property name="nestedTransactionService" ref="nestedTransactionService"/>
        <property name="counters" ref="counters"/>
    </bean>
    <bean id="eventArchiveDao" class="org.zenoss.zep.dao.impl.EventArchiveDaoImpl">
        <constructor-arg index="0" ref="dataSource"/>
        <constructor-arg index="1" ref="partitionConfig"/>
        <constructor-arg index="2" ref="databaseCompatibility"/>
        <property name="eventDaoHelper" ref="eventDaoHelper"/>
        <property name="uuidGenerator" ref="uuidGenerator"/>
    </bean>
    <bean id="eventTimeDao" class="org.zenoss.zep.dao.impl.EventTimeDaoImpl">
        <constructor-arg index="0" ref="dataSource"/>
        <constructor-arg index="1" ref="partitionConfig"/>
        <constructor-arg index="2" ref="databaseCompatibility"/>
    </bean>
    <bean id="eventTriggerDao" class="org.zenoss.zep.dao.impl.EventTriggerDaoImpl">
        <constructor-arg index="0" ref="dataSource"/>
        <property name="eventSignalSpoolDao" ref="eventSignalSpoolDao" />
        <property name="databaseCompatibility" ref="databaseCompatibility"/>
    </bean>
    <bean id="eventSignalSpoolDao" class="org.zenoss.zep.dao.impl.EventSignalSpoolDaoImpl">
        <constructor-arg index="0" ref="dataSource" />
        <property name="uuidGenerator" ref="uuidGenerator"/>
        <property name="databaseCompatibility" ref="databaseCompatibility"/>
        <property name="nestedTransactionService" ref="nestedTransactionService"/>
    </bean>
    <bean id="eventTriggerSubscriptionDao" class="org.zenoss.zep.dao.impl.EventTriggerSubscriptionDaoImpl">
        <constructor-arg index="0" ref="dataSource" />
        <property name="uuidGenerator" ref="uuidGenerator"/>
        <property name="databaseCompatibility" ref="databaseCompatibility"/>
        <property name="nestedTransactionService" ref="nestedTransactionService"/>
    </bean>
    <bean id="daoCache" class="org.zenoss.zep.dao.impl.DaoCacheImpl" init-method="init">
        <constructor-arg index="0" ref="dataSource"/>
        <constructor-arg index="1" ref="nestedTransactionService"/>
    </bean>
    <bean id="configDao" class="org.zenoss.zep.dao.impl.ConfigDaoImpl">
        <constructor-arg index="0" ref="dataSource"/>
        <constructor-arg index="1" ref="partitionConfig"/>
        <property name="maxEventArchiveIntervalMinutes" value="${zep.max_event_archive_interval_minutes:43200}" />
        <property name="nestedTransactionService" ref="nestedTransactionService"/>
    </bean>
    <bean id="indexMetadataDao" class="org.zenoss.zep.dao.impl.IndexMetadataDaoImpl">
        <constructor-arg index="0" ref="dataSource" />
        <constructor-arg index="1" ref="zepInstance" />
        <property name="databaseCompatibility" ref="databaseCompatibility"/>
        <property name="nestedTransactionService" ref="nestedTransactionService"/>
    </bean>
    <bean id="heartbeatDao" class="org.zenoss.zep.dao.impl.HeartbeatDaoImpl">
        <constructor-arg index="0" ref="dataSource" />
        <property name="databaseCompatibility" ref="databaseCompatibility" />
        <property name="nestedTransactionService" ref="nestedTransactionService" />
    </bean>
    <bean id="eventSummaryIndexQueueDao" class="org.zenoss.zep.dao.impl.EventIndexQueueDaoImpl">
        <qualifier value="summary" />
        <constructor-arg index="0" ref="dataSource" />
        <constructor-arg index="1" value="false" />
        <constructor-arg index="2" ref="eventDaoHelper" />
        <constructor-arg index="3" ref="databaseCompatibility" />
    </bean>
    <bean id="eventArchiveIndexQueueDao" class="org.zenoss.zep.dao.impl.EventIndexQueueDaoImpl">
        <qualifier value="archive" />
        <constructor-arg index="0" ref="dataSource" />
        <constructor-arg index="1" value="true" />
        <constructor-arg index="2" ref="eventDaoHelper" />
        <constructor-arg index="3" ref="databaseCompatibility" />
    </bean>
    <bean id="dbMaintenanceService" class="org.zenoss.zep.dao.impl.DBMaintenanceServiceImpl">
        <constructor-arg index="0" ref="dataSource" />
        <property name="databaseCompatibility" ref="databaseCompatibility"/>
        <constructor-arg index="1" ref="globalConf" />
        <constructor-arg index="2" ref="zepInstance" />
        <property name="eventPublisher" ref="eventPublisher" />
        <property name="uuidGenerator" ref="uuidGenerator"/>
    </bean>
    <bean id="eventDetailsConfigDao" class="org.zenoss.zep.dao.impl.EventDetailsConfigDaoImpl">
        <constructor-arg index="0" ref="dataSource" />
        <property name="nestedTransactionService" ref="nestedTransactionService"/>
    </bean>

    <!-- Indexing DAO -->
    <bean id="luceneSummaryDir" class="org.apache.lucene.store.MMapDirectory"
            factory-method="open" destroy-method="close">
        <qualifier value="summary" />
        <constructor-arg value="${zep.index.dir}/summary" />
    </bean>

    <bean id="luceneAnalyzer" class="org.zenoss.zep.index.impl.lucene.LuceneEventIndexMapper"
          factory-method="createAnalyzer" destroy-method="close">
    </bean>

    <bean id="luceneSummaryIndexWriter" class="org.apache.lucene.index.IndexWriter" destroy-method="close">
        <qualifier value="summary" />
        <constructor-arg index="0" ref="luceneSummaryDir"/>
        <constructor-arg index="1">
            <bean class="org.zenoss.zep.index.impl.lucene.LuceneEventIndexMapper"
                  factory-method="createIndexWriterConfig">
                <constructor-arg ref="luceneAnalyzer" />
                <constructor-arg ref="zepInstance" />
            </bean>
        </constructor-arg>
    </bean>

    <bean id="luceneEventSummaryIndexBackend" class="org.zenoss.zep.index.impl.lucene.LuceneEventIndexBackend" destroy-method="close" init-method="init">
        <qualifier value="summary"/>
        <constructor-arg value="event_summary"/>
        <constructor-arg ref="luceneSummaryIndexWriter"/>
        <constructor-arg ref="eventSummaryDao"/>
        <constructor-arg value="${zep.query.clause_limit:1024}"/>
        <constructor-arg ref="summaryFilterCacheManager"/>
        <constructor-arg value="${zep.query.cache_refresh_interval:0}"/>
        <constructor-arg ref="messages"/>
        <constructor-arg ref="scheduler"/>
        <constructor-arg ref="uuidGenerator"/>
        <property name="queryLimit" value="${zep.query.limit}" />
        <property name="indexDetailsConfiguration" ref="indexedDetailsConfiguration"/>
        <property name="luceneSearchTimeout" value="${zep.query.lucene_search_timeout:0}" />
    </bean>

    <bean id="luceneArchiveDir" class="org.apache.lucene.store.MMapDirectory"
            factory-method="open" destroy-method="close">
        <qualifier value="archive" />
        <constructor-arg value="${zep.index.dir}/archive" />
    </bean>

    <bean id="luceneArchiveIndexWriter" class="org.apache.lucene.index.IndexWriter" destroy-method="close">
        <qualifier value="archive" />
        <constructor-arg index="0" ref="luceneArchiveDir"/>
        <constructor-arg index="1">
            <bean class="org.zenoss.zep.index.impl.lucene.LuceneEventIndexMapper"
                  factory-method="createIndexWriterConfig">
                <constructor-arg ref="luceneAnalyzer" />
                <constructor-arg ref="zepInstance" />
            </bean>
        </constructor-arg>
    </bean>

    <bean id="summaryFilterCacheManager" class="org.zenoss.zep.index.impl.lucene.LuceneFilterCacheManager"></bean>
    <bean id="archiveFilterCacheManager" class="org.zenoss.zep.index.impl.lucene.LuceneFilterCacheManager"></bean>

    <bean id="luceneEventArchiveIndexBackend" class="org.zenoss.zep.index.impl.lucene.LuceneEventIndexBackend" destroy-method="close" init-method="init">
        <qualifier value="archive"/>
        <constructor-arg value="event_archive"/>
        <constructor-arg ref="luceneArchiveIndexWriter"/>
        <constructor-arg ref="eventArchiveDao"/>
        <constructor-arg value="${zep.query.clause_limit:1024}"/>
        <constructor-arg ref="archiveFilterCacheManager"/>
        <constructor-arg value="${zep.query.archive_cache_refresh_interval:60}"/>
        <constructor-arg ref="messages"/>
        <constructor-arg ref="scheduler"/>
        <constructor-arg ref="uuidGenerator"/>
        <property name="queryLimit" value="${zep.query.limit}" />
        <property name="indexDetailsConfiguration" ref="indexedDetailsConfiguration"/>
        <property name="luceneSearchTimeout" value="${zep.query.lucene_search_timeout:0}" />
    </bean>

    <bean id="solrEventIndexBackend" class="org.zenoss.zep.index.impl.solr.SolrEventIndexBackendFactory">
        <property name="enableSolr" value="${zep.solr.index.enable:false}"/>
        <property name="name" value="zenoss_events"/>
        <property name="solrURL" value="${zep.solr.url:http://localhost:8080/solr/}"/>
        <property name="config" ref="indexedDetailsConfiguration"/>
        <property name="dao" ref="eventArchiveDao"/>
        <property name="shards" value="${zep.solr.shards:24}"/>
        <property name="replicationFactor" value="${zep.solr.replicationFactor:1}"/>
        <property name="maxShardsPerNode" value="${zep.solr.maxShardsPerNode:-1}"/>
        <property name="concurrentUploadQueueSize" value="${zep.solr.concurrentUploadQueueSize:10000}"/>
        <property name="concurrentThreads" value="${zep.solr.concurrentThreads:4}"/>
        <property name="messages" ref="messages"/>
        <property name="scheduler" ref="scheduler"/>
        <property name="uuidGenerator" ref="uuidGenerator"/>
    </bean>

    <bean id="lucene_summary" class="org.zenoss.zep.index.impl.EventIndexBackendConfiguration">
        <constructor-arg value="lucene_summary"/>
        <constructor-arg ref="luceneEventSummaryIndexBackend"/>
        <property name="status" value="READER"/>
        <property name="asyncUpdates" value="false"/>
        <property name="honorDeletes" value="true"/>
    </bean>

    <bean id="solr_summary" class="org.zenoss.zep.index.impl.EventIndexBackendConfiguration" factory-method="createInstance">
        <constructor-arg name="enabled" value="${zep.solr.index.enable:false}"/>
        <constructor-arg name="name" value="solr_summary"/>
        <constructor-arg name="backend" ref="solrEventIndexBackend"/>
        <constructor-arg name="status" value="${zep.solr.summary.status:WRITER}"/>
        <constructor-arg name="asyncUpdates" value="${zep.solr.summary.async.updates:true}"/>
        <constructor-arg name="honorDeletes" value="${zep.solr.summary.honor.deletes:false}"/>
        <constructor-arg name="batchSize" value="${zep.solr.summary.batchSize:1000}"/>
    </bean>

    <bean id="eventSummaryIndexStateStore" class="org.zenoss.zep.index.impl.RedisKeyValueStore">
        <constructor-arg index="0" value="event_summary_index_state"/>
        <constructor-arg index="1" ref="jedisPoolUtil"/>
    </bean>

    <bean id="eventSummaryIndexConfigStore" class="org.zenoss.zep.index.impl.RedisKeyValueStore">
        <constructor-arg index="0" value="event_summary_index_config"/>
        <constructor-arg index="1" ref="jedisPoolUtil"/>
    </bean>

    <bean id="eventSummaryIndexDao" class="org.zenoss.zep.index.impl.MultiBackendEventIndexDao"
          init-method="init" destroy-method="close">
        <qualifier value="summary"/>
        <constructor-arg index="0" value="event_summary"/>
        <constructor-arg index="1" ref="eventSummaryDao"/>
        <constructor-arg index="2" ref="workQueueBuilder"/>
        <constructor-arg index="3" ref="eventSummaryIndexStateStore"/>
        <constructor-arg index="4" ref="messages"/>
        <constructor-arg index="5" ref="scheduler"/>
        <constructor-arg index="6" ref="uuidGenerator"/>
        <property name="useRedis" value="${zep.backend.configure.use.redis:false}" />
        <property name="initialBackendConfigurations">
            <list>
                <ref bean="lucene_summary"/>
                <ref bean="solr_summary"/>
            </list>
        </property>
    </bean>

    <bean id="lucene_archive" class="org.zenoss.zep.index.impl.EventIndexBackendConfiguration">
        <constructor-arg value="lucene_archive"/>
        <constructor-arg ref="luceneEventArchiveIndexBackend"/>
        <property name="status" value="${zep.lucene.archive.status:READER}"/>
        <property name="asyncUpdates" value="${zep.lucene.archive.async.updates:false}"/> <!--TODO: this is temporary to see if it affects integration tests -->
        <property name="honorDeletes" value="${zep.lucene.archive.honor.deletes:true}"/>
    </bean>

    <bean id="solr_archive" class="org.zenoss.zep.index.impl.EventIndexBackendConfiguration"
          factory-method="createInstance">
        <constructor-arg name="enabled" value="${zep.solr.index.enable:false}"/>
        <constructor-arg name="name" value="solr_archive"/>
        <constructor-arg name="backend" ref="solrEventIndexBackend"/>
        <constructor-arg name="status" value="${zep.solr.archive.status:WRITER}"/>
        <constructor-arg name="asyncUpdates" value="${zep.solr.archive.async.updates:true}"/>
        <constructor-arg name="honorDeletes" value="${zep.solr.archive.honor.deletes:true}"/>
        <constructor-arg name="batchSize" value="${zep.solr.archive.batchSize:1000}"/>
    </bean>

    <bean id="eventArchiveIndexStateStore" class="org.zenoss.zep.index.impl.RedisKeyValueStore">
        <constructor-arg index="0" value="event_archive_index_state"/>
        <constructor-arg index="1" ref="jedisPoolUtil"/>
    </bean>

    <bean id="eventArchiveIndexConfigStore" class="org.zenoss.zep.index.impl.RedisKeyValueStore">
        <constructor-arg index="0" value="event_archive_index_config"/>
        <constructor-arg index="1" ref="jedisPoolUtil"/>
    </bean>

    <bean id="eventArchiveIndexDao" class="org.zenoss.zep.index.impl.MultiBackendEventIndexDao"
          init-method="init" destroy-method="close">
        <qualifier value="archive"/>
        <constructor-arg index="0" value="event_archive"/>
        <constructor-arg index="1" ref="eventArchiveDao"/>
        <constructor-arg index="2" ref="workQueueBuilder"/>
        <constructor-arg index="3" ref="eventArchiveIndexStateStore"/>
        <constructor-arg index="4" ref="messages"/>
        <constructor-arg index="5" ref="scheduler"/>
        <constructor-arg index="6" ref="uuidGenerator"/>
        <property name="useRedis" value="${zep.backend.configure.use.redis:false}" />
        <property name="initialBackendConfigurations">
            <list>
                <ref bean="lucene_archive"/>
                <ref bean="solr_archive"/>
            </list>
        </property>
    </bean>

    <bean id="eventStoreDao" class="org.zenoss.zep.dao.impl.EventStoreDaoImpl">
        <property name="eventSummaryDao" ref="eventSummaryDao" />
        <property name="eventArchiveDao" ref="eventArchiveDao" />
        <property name="eventArchiveIndexDao" ref="eventArchiveIndexDao" />
    </bean>

    <bean id="indexedDetailsConfiguration" class="org.zenoss.zep.index.impl.IndexedDetailsConfigurationImpl">
        <property name="eventDetailsConfigDao" ref="eventDetailsConfigDao" />
    </bean>

    <bean id="eventSummaryIndexer" class="org.zenoss.zep.index.impl.EventIndexerImpl">
        <qualifier value="summary" />
        <constructor-arg index="0" ref="eventSummaryIndexDao" />
        <property name="queueDao" ref="eventSummaryIndexQueueDao" />
        <property name="pluginService" ref="pluginService"/>
    </bean>

    <bean id="eventArchiveIndexer" class="org.zenoss.zep.index.impl.EventIndexerImpl">
        <qualifier value="archive" />
        <constructor-arg index="0" ref="eventArchiveIndexDao" />
        <property name="queueDao" ref="eventArchiveIndexQueueDao" />
        <property name="pluginService" ref="pluginService"/>
    </bean>

    <bean id="eventSummaryIndexRebuilder" class="org.zenoss.zep.index.impl.EventIndexRebuilderImpl">
        <qualifier value="summary" />
        <constructor-arg index="0" value="${zep.index.enabled:true}"/>
        <property name="eventIndexer" ref="eventSummaryIndexer" />
        <property name="configDao" ref="configDao"/>
        <property name="summaryBaseDao" ref="eventSummaryDao" />
        <property name="indexDao" ref="eventSummaryIndexDao" />
        <property name="indexMetadataDao" ref="indexMetadataDao" />
        <property name="indexedDetailsConfiguration" ref="indexedDetailsConfiguration"/>
        <property name="indexDir" value="${zep.index.dir}" />
    </bean>

    <bean id="eventArchiveIndexRebuilder" class="org.zenoss.zep.index.impl.EventIndexRebuilderImpl">
        <qualifier value="archive" />
        <constructor-arg index="0" value="${zep.index.enabled:true}"/>
        <property name="eventIndexer" ref="eventArchiveIndexer" />
        <property name="configDao" ref="configDao"/>
        <property name="summaryBaseDao" ref="eventArchiveDao" />
        <property name="indexDao" ref="eventArchiveIndexDao" />
        <property name="indexMetadataDao" ref="indexMetadataDao" />
        <property name="indexedDetailsConfiguration" ref="indexedDetailsConfiguration"/>
        <property name="indexDir" value="${zep.index.dir}" />
    </bean>

    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="blockWhenExhausted" value="true"/>
        <property name="minIdle" value="10"/>
        <property name="maxIdle" value="50"/>
        <property name="maxTotal" value="200"/>
        <property name="maxWaitMillis" value="10000"/>
        <property name="testOnBorrow" value="true"/>
        <property name="testWhileIdle" value="true"/>
    </bean>

    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${zep.redis.host}"/>
        <property name="port" value="${zep.redis.port}"/>
        <property name="usePool" value="true"/>
        <property name="poolConfig" ref="jedisPoolConfig"/>
    </bean>

    <bean id="jedisPool" class="redis.clients.jedis.JedisPool">
        <constructor-arg index="0" ref="jedisPoolConfig"/>
        <constructor-arg index="1" value="${zep.redis.host:127.0.0.1}"/>
        <constructor-arg index="2" value="${zep.redis.port:6379}"/>
    </bean>

    <bean id="jedisPoolUtil" class="org.zenoss.zep.utils.JedisPoolUtil">
        <constructor-arg index="0" ref="jedisPool"/>
        <constructor-arg index="1" value="60000"/>
        <constructor-arg index="2" value="10000"/>
    </bean>

    <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
    </bean>

    <bean id="workQueueBuilder" class="org.zenoss.zep.index.impl.RedisWorkQueueBuilder">
        <constructor-arg index="0" ref="jedisPoolUtil"/>
    </bean>

    <bean id="flapTrackerDao" class="org.zenoss.zep.dao.impl.FlapTrackerDaoImpl">
   </bean>



</beans>
